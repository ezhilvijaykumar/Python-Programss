RENTLY PROBLEM


1) using set & enumerate  & tuple 

def textQueries(sentences, queries):
    start_time = time.time()
    temp=set(' '.join(sentences).split())
    for i in queries:
        s=set(i.split())
        if(s.issubset(temp)):
            t=tuple()
            for a,j in enumerate(sentences):
                if s.issubset(set(j.split())):
                    t+=(str(a),) 
            if t:
                print(' '.join(t))
            else:
                print(-1)
        else:
            print(-1)
    end_time = time.time()
    print(end_time-start_time)

if __name__ == '__main__':
    sentences_count = int(input().strip())  

    sentences = []

    for _ in range(sentences_count):
        sentences_item = input()
        sentences.append(sentences_item)
  
    queries_count = int(input().strip())

    queries = []

    for _ in range(queries_count):
        queries_item = input()
        queries.append(queries_item)
        
    textQueries(sentences, queries)


2) using set & dictionary



def textQueries(sentences, queries):
    # 1. build the hash map
    start_time = time.time()
    word_map = {}
    for query in queries:
        for query_word in query.split():        
            for i, sentence in enumerate(sentences):
                if query_word in sentence:
                    word_map.setdefault(query_word, []).append(i)
    for query in queries:
        # 2. look up in the hash map
        final_set = set()
        for word in query.split():
            if not final_set:
                final_set = set(word_map.get(word, []))
            else:
                final_set = final_set.intersection(word_map.get(word, []))
            if not final_set:
                break
        # 3. print the indices
        if final_set:
            print(' '.join( str(i) for i in sorted(final_set)))
            # or
            #print(*sorted(final_set), sep=' ')
        else:
            print(-1)
    end_time = time.time()
    print(end_time-start_time)
    
if __name__ == '__main__':
    sentences_count = int(input().strip())  

    sentences = []

    for _ in range(sentences_count):
        sentences_item = input()
        sentences.append(sentences_item) 

    queries_count = int(input().strip())

    queries = []

    for _ in range(queries_count):
        queries_item = input()
        queries.append(queries_item)
    
    textQueries(sentences, queries)


3) using set and list and binary search 



import time
#from collections import Counter as cs

def find(i,temp,t):
    if(len(temp)==1):
        if(set(i.split()).issubset(set(temp[0].split()))):
            t.append(str(sentences.index(temp[0])))
            return
    if(set(i.split()).issubset(set(' '.join(temp[:(len(temp)//2)]).split()))):
        find(i,temp[:(len(temp)//2)],t)
    if(set(i.split()).issubset(set(' '.join(temp[(len(temp)//2):]).split()))):
        find(i,temp[(len(temp)//2):],t)
    return t

def textQueries(sentences, queries):
    start_time = time.time()
    if(1<=len(sentences)<=10**4 and 1<=len(queries)<=10**4):
        temp=' '.join(sentences).split()
        for i in queries:
            t=[]
            if(set(i.split()).issubset(set(temp))):
                t=find(i,sentences,t)                
                if(t!=[]): print(' '.join(t))
                else: print(-1)
            else:
                print(-1)
        del(t,sentences,queries,temp)       
    else:
        print(-1)
    end_time = time.time()
    print(end_time-start_time)

    
if __name__ == '__main__':
    sentences_count = int(input().strip())  

    sentences = []

    for _ in range(sentences_count):
        sentences_item = input()
        sentences.append(sentences_item)

    queries_count = int(input().strip())

    queries = []

    for _ in range(queries_count):
        queries_item = input()
        queries.append(queries_item)

    textQueries(sentences, queries)



4) using list & set & counter


from collections import Counter as cs
def textQueries(sentences, queries):
    if(1<=len(sentences)<=10*4 and 1<=len(queries)<=10*4):
        temp=' '.join(sentences).split()
        for i in queries:
            t=[]
            if(set(i.split()).issubset(set(temp))):
                for j in sentences:
                    if(set(i.split()).issubset(set(j.split()))):
                        a=cs(j.split())
                        z=[a[i] for i in i.split()]
                        t.extend(str(sentences.index(j))*min(z))
                        #t.append(str(sentences.index(j)))
                if(t!=[]): print(' '.join(t))
                else: print(-1)
            else:
                print(-1)
        del(t,sentences,queries,temp)
    else:
        print(-1)
if _name_ == '_main_':
    sentences_count = int(input().strip())

    sentences = []

    for _ in range(sentences_count):
        sentences_item = input()
        sentences.append(sentences_item)

    queries_count = int(input().strip())

    queries = []

    for _ in range(queries_count):
        queries_item = input()
        queries.append(queries_item)

    textQueries(sentences, queries)



	
